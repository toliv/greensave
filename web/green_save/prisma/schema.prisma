// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WaterHeater {
  id                                  String  @id @default(uuid()) @map("id")
  energyStarUniqueId                  String  @unique @map("energy_star_unique_id")
  energyStarPartner                   String  @map("energy_star_partner")
  brandName                           String  @map("brand_name")
  modelName                           String  @map("model_name")
  modelNumber                         String  @map("model_number")
  // TODO: Make an enum
  heaterType                          String  @map("heater_type")
  uniformEnergyFactor                 Float?  @map("uniform_energy_factor")
  upc                                 String? @map("upc")
  ratingOutOf5                        Float?  @map("rating_out_of_5")
  reviewCount                         Int?    @map("review_count")
  heatPumpType                        String? @map("heat_pump_type")
  // TODO: Can this become required? Rows missing this seem to all be solar 
  fuelType                            String? @map("fuel_type")
  ventType                            String? @map("vent_type")
  storageVolumeGallons                Int?    @map("storage_volume_gallons")
  firstHourRatingGallons              Int?    @map("first_hour_rating_gallons")
  maxGallonsPerMinute                 Float?  @map("max_gallons_per_minute")
  // Some water heaters are duplicates, make sure we store this relationship
  parentEnergyStarId                  String? @map("parent_energy_star_id")
  // TODO: Make this into an enum ?
  inputVoltageHPWH                    Int?    @map("input_voltage_hpwh")
  tankHeightInches                    Float?  @map("tank_height_inches")
  tankDiameterInches                  Float?  @map("tank_diameter_inches")
  electricUsageKWHyear                Int?    @map("electric_usage_kwh_year")
  thermsPerYear                       Int?    @map("therms_per_year")
  gallonsPerYearPropane               Float?  @map("gallons_per_year_propane")
  solarSystemType                     String? @map("solar_system_type")
  solarTankVolumeGallons              Int?    @map("solar_tank_volume_gallons")
  solarCollectorPanelAreaSqFt         Float?  @map("solar_collector_panel_area_sq_ft")
  solarFreezeToleranceLimitFahrenheit Int?    @map("solar_freeze_tolerance_limit_fahrenheit")
  solarUniformEnergyFactor            Float?  @map("solar_uniform_energy_factor")
  // For now, just store the price directly on the heater.
  priceInCents                        Int?    @map("price_in_cents")

  priceRecords     WaterHeaterPriceRecord[]
  UserEmailRequest UserEmailRequest[]

  @@map("water_heaters")
}

model WaterHeaterPriceRecord {
  id            String      @id @default(uuid()) @map("id")
  waterHeaterId String      @map("water_heater_id")
  waterHeater   WaterHeater @relation(fields: [waterHeaterId], references: [id])
  priceInCents  Int         @map("price_in_cents")
  sourceUrl     String?     @map("source_url")
  dateRecorded  DateTime    @map("date_recorded")

  @@map("water_heater_price_records")
}

model ZipCodeReference {
  id                String  @id @default(uuid()) @map("id")
  zipCode           String  @unique @map("zip_code")
  latitude          Decimal @map("latitude") @db.Decimal(9, 6)
  longitude         Decimal @map("longitude") @db.Decimal(9, 6)
  cityName          String  @map("city_name")
  stateAbbreviation String  @map("state_abbreviation")
  stateName         String  @map("state_name")
  isSunBeltLocation Boolean @map("is_sun_belt_location")

  @@map("zip_code_references")
}

model StateInputFactor {
  id                                String @id @default(uuid())
  state                             String @unique @map("state")
  // Assumed Fahrenheit
  groundwaterTemperature            Int    @map("groundwater_temperature")
  averageWinterTemperature          Int    @map("average_winter_temperature")
  solarTankVolumeFactor             Float  @map("solar_tank_volume_factor")
  monthlyElectricityBillCents       Int?   @map("monthly_electricity_bill_cents")
  monthlyGasBillCents               Int?   @map("monthly_gas_bill_cents")
  electricityPriceCentsPerKwh       Int    @map("electricity_price_cents_per_kwh")
  gasPricePerThousandCubicFeetCents Int    @map("gas_price_per_thousand_cubic_feet_cents")
  propanePricePerGallonCents        Int    @map("propane_price_per_gallon_cents")

  @@map("state_input_factors")
}

model UserFormSubmission {
  // NOTE: this matches zod schema, we're using strings for now
  id               String             @id @default(uuid())
  submissionData   Json               @map("submission_data")
  createdAt        DateTime           @map("created_at")
  UserEmailRequest UserEmailRequest[]

  @@map("user_form_submission")
}

model UserEmailRequest {
  // Records an instance of a user submitting a form for email contact
  id                   String             @id @default(uuid())
  // Whether they consent to be contacted regarding purchase
  contactAllowed       Boolean            @map("contact_allowed")
  // The water heater we recommended
  waterHeaterId        String             @map("water_heater_id")
  waterHeater          WaterHeater        @relation(fields: [waterHeaterId], references: [id])
  // The original user form submission 
  userFormSubmissionId String             @map("user_form_submission_id")
  userFormSubmission   UserFormSubmission @relation(fields: [userFormSubmissionId], references: [id])
  createdAt            DateTime           @map("created_at")
  resendEmailId        String?            @map("resend_email_id")

  @@map("user_email_request")
}
